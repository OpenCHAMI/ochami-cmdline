#!/usr/bin/env python3
import requests
import yaml
import argparse
import json
import os
import webbrowser
import urllib
import uuid
import base64
import time
from http.server import HTTPServer, BaseHTTPRequestHandler

access_token = ""
cacert=True

############# UTIL ############
def readConfig(cfile):
    with open(cfile, mode='r') as f:
        cdict = yaml.safe_load(f)
    return cdict

def makeRequest(url, r_type, headers, jdata=None, cert=cacert):
    if r_type is "get":
        r = requests.get(url, json = jdata, headers=headers, verify=cert)
    elif r_type is "post":
        r = requests.post(url, json = jdata, headers=headers, verify=cert)
    elif r_type is "delete":
        r = requests.delete(url, json = jdata, headers=headers, verify=cert)
    else:
        print("unrecognized request type: ", r_type)

    # Make this more informative when things break...
    r.raise_for_status()
    if r.content:
        return r.json()
    else:
        return {}

def nodeComponentPayload(smd):
    sdata = {
            "Components": [
                {
                    "ID": smd['xname'],
                    "State": "Ready",
                    "Enabled": True,
                    "Role": "Compute",
                    "Arch": "X86",
                    "NID": smd['nid']
                }
            ],
            "Force": False
            }
    return sdata

def ethernetInterfacePayload(smd):
    sdata = {
            "Description": "Interface for " + smd['name'],
            "MACAddress": smd['mac'],
            "IPAddresses": [
                {
                    "IPAddress": smd['ipaddr'],
                    "Network": "NMN"
                    }
                ],
            "ComponentID": smd['xname']
            }
    return sdata

def redfishEndpointPayload(smd):
    sdata = {
                "ID": smd['xname'].replace('n0',''),
                "Name": smd['name'],
                "Hostname": smd['name'],
                "Domain": "",
                "FQDN": smd['name'],
                "Enabled": True,
                "User": "root",
                "Password": "",
                "MacRequired": True,
                "IPAddress": smd['bmc_ipaddr'],
                "RediscoverOnUpdate": False,
                "Systems": [
                    {
                        "Data": {
                            "@odata.id": "/redfish/v1/Systems/Self",
                            "Id": "Self",
                            "Description": "System Self",
                            "Name": "System",
                            "Status": {
                                "State": "Enabled"
                            },
                            "SystemType": "Physical",
                            "UUID": str(uuid.uuid4())
                        },
                        "EthernetInterfaces": [
                            {
                                "@odata.id": "/redfish/v1/Systems/Self/EthernetInterfaces/"+smd['name'],
                                "Id": smd['name'],
                                "InterfaceEnabled": True,
                                "MACAddress": smd['mac'],
                                "Description": ""
                            }
                        ]
                    }
                ]
            }
    return sdata
############# UTIL ############


############# SMD #############
def addNode(smd_url, headers, xname, nid):
    nc = nodeComponentPayload({'xname': xname, 'nid': nid})
    makeRequest(smd_url+'/State/Components', 'post', headers, nc)

def deleteNode(smd_url, headers, xname):
    makeRequest(url=smd_url+'/State/Components/'+xname, r_type='delete', headers=headers)

def addInterface(smd_url, headers, name, xname, mac, ipaddr):
    ei = ethernetInterfacePayload({'name': name,'xname': xname,'mac': mac, 'ipaddr': ipaddr})
    makeRequest(url=smd_url+'/Inventory/EthernetInterfaces', r_type='post', jdata=ei, headers=headers)

def deleteEthernetInterface(smd_url, headers, xname):
    smd_data = getSMDInterfaces(smd_url, headers, xname)
    if smd_data:
        makeRequest(url=smd_url+'/Inventory/EthernetInterfaces/'+smd_data['ID'], r_type='delete', headers=headers)

def addRedfishEndpoint(smd_url, headers, name, xname, mac, bmc_ipaddr):
    re = redfishEndpointPayload({'name': name, 'xname': xname, 'mac': mac, 'bmc_ipaddr': bmc_ipaddr})
    makeRequest(url=smd_url+'/Inventory/RedfishEndpoints', r_type='post', headers=headers, jdata=re)

def getSMDComponents(smd_url, headers, xname):
    if not xname:
        data = makeRequest(url=smd_url+'/State/Components', r_type='get', headers=headers)
    else:
        data = makeRequest(url=smd_url+'/State/Components/'+xname, r_type='get', headers=headers)
    return data

def getSMDInterfaces(smd_url, headers, xname):
    data = makeRequest(url=smd_url+'/Inventory/EthernetInterfaces', r_type='get', headers=headers)
    if not xname:
        return data
    else:
        for s in data:
            if s['ComponentID'] == xname:
                return s
    return {}
############# SMD #############


############# BSS #############
def getBSS(bss_url, headers):
    data = makeRequest(url=bss_url+'/bootparameters', r_type='get', headers=headers)
    return data

def addBootParams(bss_url, headers, bss_data):
    makeRequest(url=bss_url+'/bootparameters', r_type='post', jdata=bss_data, headers=headers)

def updateBootParams(bss_url, headers, bss_data):
    makeRequest(url=bss_url+'/bootparameters', r_type='delete', jdata=bss_data, headers=headers)
    makeRequest(url=bss_url+'/bootparameters', r_type='post', jdata=bss_data, headers=headers)

def deleteBootParams(bss_url, headers, bss_data):
    makeRequest(url=bss_url+'/bootparameters', r_type='delete', jdata=bss_data, headers=headers)
############# BSS #############

############# AUTH ############
class AccessTokenHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        self.receive_token()

    def receive_token(self):
        # length = int(self.headers.get('content-length'))
        # field_data = self.rfile.read(length)
        # fields = urllib.parse.parse_qs(str(field_data,"UTF-8"))
        if self.headers.get("access_token"):
            global access_token
            access_token = self.headers.get('access_token')
            with open(".ochami-token", "w+") as f:
                f.write(access_token)
            print(f"token received: {access_token}")
            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.end_headers()

def login(url: str, host: str, port: int) -> str:
    global access_token
    # open browser and wait for access code if target is set
    if host:
        url += f"?target={urllib.parse.quote_plus(f'http://{host}:{port}')}"
    is_open = webbrowser.open(url)
    if is_open:
        print(f"waiting to receive an access token...")
        if host:
            try:
                httpd = HTTPServer((host, port), AccessTokenHandler)
                while not access_token:
                    httpd.serve_forever()
            except KeyboardInterrupt:
                print("shutting down without receiving token")
                httpd.shutdown()

def is_access_token_valid(token: str) -> bool:
    # NOTE: doing validation manually even though PyJwt can do this as well
    # no token is automatically invalid
    if not token:
        print("no token found")
        return False
    
    # base64 decode the token into its 3 segments
    segments = token.split(".", 3)
    decoded_segments = []
    for segment in segments:
        padded = segment + "="*divmod(len(segment),4)[1]
        decoded_segments.append(base64.urlsafe_b64decode(padded))
    
    # check payload for expiration date (token is valid if it doesn't exist)
    if len(decoded_segments) >= 2:
        payload = json.loads(decoded_segments[1])
        expires_at = payload["exp"]
        if expires_at:
            current_time = time.time()
            return current_time < expires_at
    else:
        print("could not validate token")
        return False
############# AUTH ############


def setArgs():
    parser = argparse.ArgumentParser()
    parser.add_argument("--access-token", dest="access_token", default="", type=str)
    parser.add_argument("--access-token-file", dest="access_token_file", default=".ochami-token", type=str)
    parser.add_argument("--ca-cert", dest="ca_cert", type=str, default="", help="set path for CA certificate")
    subparser = parser.add_subparsers(dest='command')

    smd = subparser.add_parser('smd')
    smd.add_argument('--config', type=str)
    smd.add_argument('--url',type=str)
    smd.add_argument('--add-node', dest='add_node', action="store_true", default=False)
    smd.add_argument('--delete-node', dest='delete_node', action="store_true", default=False)
    smd.add_argument('--add-interface', dest='add_interface', action="store_true", default=False)
    smd.add_argument('--delete-interface', dest='delete_interface', action="store_true", default=False)
    smd.add_argument('--add-rf-endpoint', dest='add_rf_endpoint', action="store_true", default=False)
    smd.add_argument('--get-components', dest='get_components', action="store_true", default=False)
    smd.add_argument('--get-interfaces', dest='get_interfaces', action="store_true", default=False)
    smd.add_argument('--fake-discovery', dest='fake_discovery', action="store_true", default=False)
    smd.add_argument('--name',type=str)
    smd.add_argument('--xname',type=str)
    smd.add_argument('--mac',type=str)
    smd.add_argument('--ipaddr',type=str)
    smd.add_argument('--bmc-ipaddr',dest="bmc_ipaddr",type=str)
    smd.add_argument('--nid',type=str)
    bss = subparser.add_parser('bss')
    bss.add_argument('--config',type=str)
    bss.add_argument('--url', type=str)
    bss.add_argument('--add-bootparams', dest='add_bootparams', action="store_true", default=False)
    bss.add_argument('--update-bootparams', dest='update_bootparams', action="store_true", default=False)
    bss.add_argument('--delete-bootparams', dest='delete_bootparams', action="store_true", default=False)
    bss.add_argument('--get-bootparams', dest='get_bootparams', action="store_true", default=False)
    login = subparser.add_parser('login')
    login.add_argument("--url", type=str, default="http://127.0.0.1:3333/login", help="set the login URL")
    login.add_argument("--target-host", dest='host', type=str, default="127.0.0.1", help="set the target host receive access token")
    login.add_argument("--target-port", dest='port', type=int, default=5000, help="set the target port receive access token")
    args = parser.parse_args()
    return args

def main():
    global access_token
    global cacert
    args = setArgs()
    headers = {}

    # do access token stuff
    if os.getenv("OCHAMI_ACCESS_TOKEN"):
        access_token = os.getenv(f"{os.getenv('OCHAMI_ACCESS_TOKEN')}")
        headers = {"Authorization": f"Bearer {os.getenv('OCHAMI_ACCESS_TOKEN')}"}
    if args.access_token:
        access_token = args.access_token
        if access_token:
            headers = {"Authorization": f"Bearer {args.access_token}"}
    elif args.access_token_file:
        if os.path.exists(args.access_token_file):
            with open(args.access_token_file, "r") as f:
                access_token = f.read()
                if access_token:
                    headers = {"Authorization": f"Bearer {access_token}"}
    
    # set CA cert var
    cacert=args.ca_cert

    if args.command == "smd":
        if os.getenv("SMD_URL"):
            smd_url = os.getenv('SMD_URL')
        elif args.url:
            smd_url = args.url
        if args.config:
            config = args.config
            cdict = readConfig(config)
            for c in cdict['nodes']:
                if args.fake_discovery:
                    print(c)
                    addRedfishEndpoint(smd_url, headers, c['name'], c['xname'], c['mac'], c['bmc_ipaddr'])
                addNode(smd_url, headers, c['xname'], c['nid'])
                addInterface(smd_url, headers, c['name'], c['xname'], c['mac'], c['ipaddr'])
        elif args.add_node:
            addNode(smd_url, headers, args.xname, args.nid)
        elif args.delete_node:
            deleteNode(smd_url, headers, args.xname)
        elif args.add_interface:
            addInterface(smd_url, headers, args.name, args.xname, args.mac, args.ipaddr)
        elif args.delete_interface:
            deleteEthernetInterface(smd_url, headers, args.xname)
        elif args.add_rf_endpoint:
            addRedfishEndpoint(smd_url, headers, args.name, args.xname, args.mac, args.bmc_ipaddr)
        elif args.get_components:
            sc = getSMDComponents(smd_url, headers, args.xname)
            json_formatted_str = json.dumps(sc, indent=2)
            print(json_formatted_str)
        elif args.get_interfaces:
            si = getSMDInterfaces(smd_url, headers, args.xname)
            json_formatted_str = json.dumps(si, indent=2)
            print(json_formatted_str)


    elif args.command == "bss":
        config = args.config
        if os.getenv("BSS_URL"):
            bss_url = os.getenv('BSS_URL')
        elif args.url:
            bss_url = args.url
        bss_dict = readConfig(config)
        if args.add_bootparams:
            addBootParams(bss_url, headers, bss_dict)
        elif args.update_bootparams:
            updateBootParams(bss_url, headers, bss_dict)
        elif args.delete_bootparams:
            deleteBootParams(bss_url, headers, bss_dict)
        elif args.get_bootparams:
            bss = getBSS(bss_url, headers)
            json_formatted_str = json.dumps(bss, indent=2)
            print(json_formatted_str)
    
    elif args.command == "login":
        url = args.url
        host = args.host
        port = args.port
        # todo: only try to log in if we have an invalid token
        if not is_access_token_valid(access_token):
            access_token = ""
            login(url, host, port)
        else:
            print("found a valid token")


if __name__ == "__main__":
    main()

# example usage: ./ochami-cli smd --config config.yml --url http://127.0.0.1:27779/hsm/v2
